import { list } from '@keystone-6/core';
import { relationship, text, timestamp, integer, json } from '@keystone-6/core/fields';
import { select } from '@keystone-6/core/fields';

export const lists = {
  // Cornerstone of the website
  // Widgets are self contained pieces of content that multiple pages may use
  // They are configurable, allowing non-technical users to choose how they look/behave
  // and choose what data to be populated with.
  // Examples of widgets can be graphs/charts, calculators, 3d visualizations, etc.
  Widget: list({
    fields: {
      canonicalId: text({ validation: { isRequired: true }, isIndexed: 'unique' }),
      type: select(
        { validation: { isRequired: true }, type: 'string', options: ['Recipe001']
      }),
      version: integer({ validation: { isRequired: true } }),
      data: json(),
    },
  }),
  // Connects a Widget to a Page
  PageWidget: list({
    fields: {
      // Space separated list of classes
      container_classes: text(),
      order: integer({ validation: { isRequired: true } }),
      widget: relationship({ ref: 'Widget', many: false }),
    },
  }),
  // The body of a page
  Page: list({
    fields: {
      canonicalId: text({ validation: { isRequired: true }, isIndexed: 'unique' }),
      // Title does not have to be unique. 
      // The content on the site will span multiple genres and we don't want to restrict 
      // flexibility of content, title included.
      title: text({ validation: { isRequired: true } }),
      version: integer({ validation: { isRequired: true } }),
      // In addition to widget configuration, all widgets should be freely editable
      // via user css rules       
      styles: text(),
    },
  }),
  // A publicly accessible page
  PublishedPage: list({
    fields: {
      // Url of published page, must be unique to the whole site
      url: text({ validation: { isRequired: true }, isIndexed: 'unique' }),
      // Readonly, generated by the publishing system
      contentHash: text(),
      // A page represents the body, and the template controls the rest of the UI.
      // For example, one template may be for blog posts, one may be for landing pages, 
      // another that's minimal for multimedia pages
      template: select({
        validation: { isRequired: true }, type: 'enum', options: ['Default', 'default']
      }),
      publishTime: timestamp(),
      page: relationship({ ref: 'Page', many: false }),
    },
    // TODO: might need publishing artifacts
  }),
};
