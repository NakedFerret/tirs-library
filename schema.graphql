# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Widget {
  id: ID!
  canonicalId: String
  type: String
  version: Int
  data: JSON
}

input WidgetWhereUniqueInput {
  id: ID
  canonicalId: String
}

input WidgetWhereInput {
  AND: [WidgetWhereInput!]
  OR: [WidgetWhereInput!]
  NOT: [WidgetWhereInput!]
  id: IDFilter
  canonicalId: StringFilter
  type: StringFilter
  version: IntFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input WidgetOrderByInput {
  id: OrderDirection
  canonicalId: OrderDirection
  type: OrderDirection
  version: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input WidgetUpdateInput {
  canonicalId: String
  type: String
  version: Int
  data: JSON
}

input WidgetUpdateArgs {
  where: WidgetWhereUniqueInput!
  data: WidgetUpdateInput!
}

input WidgetCreateInput {
  canonicalId: String
  type: String
  version: Int
  data: JSON
}

type PageWidget {
  id: ID!
  container_classes: String
  order: Int
  widget: Widget
}

input PageWidgetWhereUniqueInput {
  id: ID
}

input PageWidgetWhereInput {
  AND: [PageWidgetWhereInput!]
  OR: [PageWidgetWhereInput!]
  NOT: [PageWidgetWhereInput!]
  id: IDFilter
  container_classes: StringFilter
  order: IntFilter
  widget: WidgetWhereInput
}

input PageWidgetOrderByInput {
  id: OrderDirection
  container_classes: OrderDirection
  order: OrderDirection
}

input PageWidgetUpdateInput {
  container_classes: String
  order: Int
  widget: WidgetRelateToOneForUpdateInput
}

input WidgetRelateToOneForUpdateInput {
  create: WidgetCreateInput
  connect: WidgetWhereUniqueInput
  disconnect: Boolean
}

input PageWidgetUpdateArgs {
  where: PageWidgetWhereUniqueInput!
  data: PageWidgetUpdateInput!
}

input PageWidgetCreateInput {
  container_classes: String
  order: Int
  widget: WidgetRelateToOneForCreateInput
}

input WidgetRelateToOneForCreateInput {
  create: WidgetCreateInput
  connect: WidgetWhereUniqueInput
}

type Page {
  id: ID!
  canonicalId: String
  title: String
  version: Int
  styles: String
}

input PageWhereUniqueInput {
  id: ID
  canonicalId: String
}

input PageWhereInput {
  AND: [PageWhereInput!]
  OR: [PageWhereInput!]
  NOT: [PageWhereInput!]
  id: IDFilter
  canonicalId: StringFilter
  title: StringFilter
  version: IntFilter
  styles: StringFilter
}

input PageOrderByInput {
  id: OrderDirection
  canonicalId: OrderDirection
  title: OrderDirection
  version: OrderDirection
  styles: OrderDirection
}

input PageUpdateInput {
  canonicalId: String
  title: String
  version: Int
  styles: String
}

input PageUpdateArgs {
  where: PageWhereUniqueInput!
  data: PageUpdateInput!
}

input PageCreateInput {
  canonicalId: String
  title: String
  version: Int
  styles: String
}

type PublishedPage {
  id: ID!
  url: String
  contentHash: String
  template: PublishedPageTemplateType
  publishTime: DateTime
  page: Page
}

enum PublishedPageTemplateType {
  Default
  default
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input PublishedPageWhereUniqueInput {
  id: ID
  url: String
}

input PublishedPageWhereInput {
  AND: [PublishedPageWhereInput!]
  OR: [PublishedPageWhereInput!]
  NOT: [PublishedPageWhereInput!]
  id: IDFilter
  url: StringFilter
  contentHash: StringFilter
  template: PublishedPageTemplateTypeNullableFilter
  publishTime: DateTimeNullableFilter
  page: PageWhereInput
}

input PublishedPageTemplateTypeNullableFilter {
  equals: PublishedPageTemplateType
  in: [PublishedPageTemplateType!]
  notIn: [PublishedPageTemplateType!]
  not: PublishedPageTemplateTypeNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input PublishedPageOrderByInput {
  id: OrderDirection
  url: OrderDirection
  contentHash: OrderDirection
  template: OrderDirection
  publishTime: OrderDirection
}

input PublishedPageUpdateInput {
  url: String
  contentHash: String
  template: PublishedPageTemplateType
  publishTime: DateTime
  page: PageRelateToOneForUpdateInput
}

input PageRelateToOneForUpdateInput {
  create: PageCreateInput
  connect: PageWhereUniqueInput
  disconnect: Boolean
}

input PublishedPageUpdateArgs {
  where: PublishedPageWhereUniqueInput!
  data: PublishedPageUpdateInput!
}

input PublishedPageCreateInput {
  url: String
  contentHash: String
  template: PublishedPageTemplateType
  publishTime: DateTime
  page: PageRelateToOneForCreateInput
}

input PageRelateToOneForCreateInput {
  create: PageCreateInput
  connect: PageWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createWidget(data: WidgetCreateInput!): Widget
  createWidgets(data: [WidgetCreateInput!]!): [Widget]
  updateWidget(where: WidgetWhereUniqueInput!, data: WidgetUpdateInput!): Widget
  updateWidgets(data: [WidgetUpdateArgs!]!): [Widget]
  deleteWidget(where: WidgetWhereUniqueInput!): Widget
  deleteWidgets(where: [WidgetWhereUniqueInput!]!): [Widget]
  createPageWidget(data: PageWidgetCreateInput!): PageWidget
  createPageWidgets(data: [PageWidgetCreateInput!]!): [PageWidget]
  updatePageWidget(
    where: PageWidgetWhereUniqueInput!
    data: PageWidgetUpdateInput!
  ): PageWidget
  updatePageWidgets(data: [PageWidgetUpdateArgs!]!): [PageWidget]
  deletePageWidget(where: PageWidgetWhereUniqueInput!): PageWidget
  deletePageWidgets(where: [PageWidgetWhereUniqueInput!]!): [PageWidget]
  createPage(data: PageCreateInput!): Page
  createPages(data: [PageCreateInput!]!): [Page]
  updatePage(where: PageWhereUniqueInput!, data: PageUpdateInput!): Page
  updatePages(data: [PageUpdateArgs!]!): [Page]
  deletePage(where: PageWhereUniqueInput!): Page
  deletePages(where: [PageWhereUniqueInput!]!): [Page]
  createPublishedPage(data: PublishedPageCreateInput!): PublishedPage
  createPublishedPages(data: [PublishedPageCreateInput!]!): [PublishedPage]
  updatePublishedPage(
    where: PublishedPageWhereUniqueInput!
    data: PublishedPageUpdateInput!
  ): PublishedPage
  updatePublishedPages(data: [PublishedPageUpdateArgs!]!): [PublishedPage]
  deletePublishedPage(where: PublishedPageWhereUniqueInput!): PublishedPage
  deletePublishedPages(
    where: [PublishedPageWhereUniqueInput!]!
  ): [PublishedPage]
}

type Query {
  widgets(
    where: WidgetWhereInput! = {}
    orderBy: [WidgetOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Widget!]
  widget(where: WidgetWhereUniqueInput!): Widget
  widgetsCount(where: WidgetWhereInput! = {}): Int
  pageWidgets(
    where: PageWidgetWhereInput! = {}
    orderBy: [PageWidgetOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [PageWidget!]
  pageWidget(where: PageWidgetWhereUniqueInput!): PageWidget
  pageWidgetsCount(where: PageWidgetWhereInput! = {}): Int
  pages(
    where: PageWhereInput! = {}
    orderBy: [PageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Page!]
  page(where: PageWhereUniqueInput!): Page
  pagesCount(where: PageWhereInput! = {}): Int
  publishedPages(
    where: PublishedPageWhereInput! = {}
    orderBy: [PublishedPageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [PublishedPage!]
  publishedPage(where: PublishedPageWhereUniqueInput!): PublishedPage
  publishedPagesCount(where: PublishedPageWhereInput! = {}): Int
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
